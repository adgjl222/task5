<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.tian.dao.UserMapper">
  <resultMap id="BaseResultMap" type="com.tian.model.User">
    <constructor>
      <idArg column="id" javaType="java.lang.Integer" jdbcType="INTEGER" />
      <arg column="user_name" javaType="java.lang.String" jdbcType="VARCHAR" />
      <arg column="user_password" javaType="java.lang.String" jdbcType="VARCHAR" />
      <arg column="phone_number" javaType="java.lang.String" jdbcType="VARCHAR" />
      <arg column="email" javaType="java.lang.String" jdbcType="VARCHAR" />
      <arg column="salt" javaType="java.lang.String" jdbcType="VARCHAR" />
      <arg column="created_at" javaType="java.lang.Long" jdbcType="BIGINT" />
      <arg column="updated_at" javaType="java.lang.Long" jdbcType="BIGINT" />
    </constructor>
  </resultMap>
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>

  <sql id="Update_By_Example_Where_Clause">
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    id, user_name, user_password, phone_number, email, salt, created_at, updated_at
  </sql>

  <select id="findPwdByName"  resultType="java.lang.String">
    select 
    user_password
    from user
    where user_name = #{userName,jdbcType=VARCHAR}
  </select>

  <select id="selectName"  resultType="java.lang.Integer">
    select
   id
    from user
    where user_name = #{userName,jdbcType=VARCHAR}
  </select>

  <insert id="insert" parameterType="com.tian.model.User">
    insert into user (id, user_name, user_password, 
      phone_number, email, salt, 
      created_at, updated_at)
    values (#{id,jdbcType=INTEGER}, #{userName,jdbcType=VARCHAR}, #{userPassword,jdbcType=VARCHAR}, 
      #{phoneNumber,jdbcType=VARCHAR}, #{email,jdbcType=VARCHAR}, #{salt,jdbcType=VARCHAR},
      #{createdAt,jdbcType=BIGINT}, #{updatedAt,jdbcType=BIGINT})
  </insert>

  <insert id="insertSelective" parameterType="com.tian.model.User" useGeneratedKeys="true" keyProperty="id">
    insert into user
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="id != null">
        id,
      </if>
      <if test="userName != null">
        user_name,
      </if>
      <if test="userPassword != null">
        user_password,
      </if>
      <if test="phoneNumber != null">
        phone_number,
      </if>
      <if test="email != null">
        email,
      </if>
      <if test="salt != null">
        salt,
      </if>
      <if test="createdAt != null">
        created_at,
      </if>
      <if test="updatedAt != null">
        updated_at,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="id != null">
        #{id,jdbcType=INTEGER},
      </if>
      <if test="userName != null">
        #{userName,jdbcType=VARCHAR},
      </if>
      <if test="userPassword != null">
        #{userPassword,jdbcType=VARCHAR},
      </if>
      <if test="phoneNumber != null">
        #{phoneNumber,jdbcType=VARCHAR},
      </if>
      <if test="email != null">
        #{email,jdbcType=VARCHAR},
      </if>
      <if test="salt != null">
        #{salt,jdbcType=VARCHAR},
      </if>
      <if test="createdAt != null">
        #{createdAt,jdbcType=BIGINT},
      </if>
      <if test="updatedAt != null">
        #{updatedAt,jdbcType=BIGINT},
      </if>
    </trim>
  </insert>

<!--  <update id="updateUser" parameterType="user">
    update user
    set
    <if test="name != null">
      name=#{name},
    </if>
    <if test="pwd != null">
      pwd=#{pwd},
    </if>
    <if test="salt != null">
      salt=#{salt},
    </if>

    <if test="email != null">
      email=#{email},
    </if>
    <if test="phone != null">
      phone=#{phone},
    </if>
    <if test="img != null">
      img=#{img},
    </if>
    <if test="createAt != null">
      create_at=#{createAt},
    </if>
    <if test="updateAt != null">
      update_at=#{updateAt}
    </if>
    where id = #{id}
  </update>-->

  <update id="updateUser" parameterType="com.tian.model.User" >
    update user
    set
        salt = #{salt},

        updated_at = #{updatedAt}

    where id = #{id}
  </update>




  <select id="getUserByPhone" parameterType="string" resultMap="BaseResultMap">
    select * from user where phone_number = #{phoneNumber}
  </select>


  <select id="getUserByEmail" parameterType="string" resultMap="BaseResultMap">
    select * from user where email = #{email}
  </select>

  <select id="getUserByName" parameterType="string" resultMap="BaseResultMap">
    select * from user where user_name = #{userName}
  </select>

</mapper>